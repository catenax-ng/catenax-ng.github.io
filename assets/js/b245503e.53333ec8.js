"use strict";(self.webpackChunkcatenax_ng=self.webpackChunkcatenax_ng||[]).push([[4309],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=r.createContext({}),c=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=c(t.components);return r.createElement(s.Provider,{value:e},t.children)},h={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},p=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,s=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),p=c(n),d=a,m=p["".concat(s,".").concat(d)]||p[d]||h[d]||o;return n?r.createElement(m,i(i({ref:e},u),{},{components:n})):r.createElement(m,i({ref:e},u))}));function d(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l.mdxType="string"==typeof t?t:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5468:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={title:"How lint and test your helm chart"},i=void 0,l={unversionedId:"guides/how-to-lint-and-test-your-helm-chart",id:"guides/how-to-lint-and-test-your-helm-chart",title:"How lint and test your helm chart",description:"This how-to will show you some options, how you can improve the quality of your helm chart by linting and testing",source:"@site/docs/guides/how-to-lint-and-test-your-helm-chart.md",sourceDirName:"guides",slug:"/guides/how-to-lint-and-test-your-helm-chart",permalink:"/docs/guides/how-to-lint-and-test-your-helm-chart",draft:!1,editUrl:"https://github.com/catenax-ng/catenax-ng.github.io/edit/main/docs/guides/how-to-lint-and-test-your-helm-chart.md",tags:[],version:"current",frontMatter:{title:"How lint and test your helm chart"},sidebar:"tutorialSidebar",previous:{title:"How To Define Helm Chart Dependencies",permalink:"/docs/guides/how-to-helm-dependency"},next:{title:"How To Monitor CPU And Memory Usage",permalink:"/docs/guides/how-to-monitor"}},s={},c=[{value:"GitHub workflow",id:"github-workflow",level:2}],u={toc:c};function h(t){let{components:e,...n}=t;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This how-to will show you some options, how you can improve the quality of your helm chart by linting and testing\nit in a GitHub workflow."),(0,a.kt)("p",null,"There is also guidance on how you can run the checks on your local machine, so that you are able to lint and test your\nchart, before pushing it the remote repository."),(0,a.kt)("h2",{id:"github-workflow"},"GitHub workflow"),(0,a.kt)("p",null,"The GitHub workflow in this section is a good option to run checks on pull requests.\nIt will lint your Helm chart and execute helm test to validate your installation on a kind cluster, that will be\ncreated on demand on the GitHub runner."),(0,a.kt)("p",null,"You can use the following workflow definition as a starting point:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'name: Lint and Test Charts\n\n# Run chart linting and tests on each pull request\non: pull_request\n\njobs:\n  lint-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: Set up Helm\n        uses: azure/setup-helm@v1\n        with:\n          version: v3.9.3\n\n      # Setup python as a prerequisite for chart linting \n      - uses: actions/setup-python@v2\n        with:\n          python-version: 3.7\n\n      - name: Set up chart-testing\n        uses: helm/chart-testing-action@v2.2.1\n\n      - name: Run chart-testing (list-changed)\n        id: list-changed\n        run: |\n          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})\n          if [[ -n "$changed" ]]; then\n            echo "::set-output name=changed::true"\n          fi\n\n      # run chart linting \n      - name: Run chart-testing (lint)\n        run: ct lint --target-branch ${{ github.event.repository.default_branch }} --config charts/chart-testing-config.yaml\n\n      # Preparing a kind cluster to install and test charts on\n      - name: Create kind cluster\n        uses: helm/kind-action@v1.2.0\n        if: steps.list-changed.outputs.changed == \'true\'\n\n      # install the chart to the kind cluster and run helm test\n      # define charts to test with the --charts parameter\n      - name: Run chart-testing (install)\n        run: ct install --charts charts/k8s-helm-example --config charts/chart-testing-config.yaml\n')),(0,a.kt)("p",null,"You can use this workflow 'as-is'. The only thing you need to adapt is the list of charts to test in the final\n",(0,a.kt)("inlineCode",{parentName:"p"},"ct install")," step."),(0,a.kt)("p",null,"As you might have noticed, the ",(0,a.kt)("inlineCode",{parentName:"p"},"ct lint")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ct install")," steps are also using a configuration file specified by a\n",(0,a.kt)("inlineCode",{parentName:"p"},"--config")," parameter. Currently, we recommend using the chart-testing defaults. The only settings you might want to\ndisable is the maintainer check while linting the chart.\nThis can be achieved with the following setting in the configuration file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# charts/chart-testing-config.yaml\nvalidate-maintainers: false\n")))}h.isMDXComponent=!0}}]);