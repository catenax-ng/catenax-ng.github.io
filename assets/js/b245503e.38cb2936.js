"use strict";(self.webpackChunkcatenax_ng=self.webpackChunkcatenax_ng||[]).push([[4309],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>p});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},h=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),m=c(n),p=i,d=m["".concat(s,".").concat(p)]||m[p]||u[p]||o;return n?a.createElement(d,r(r({ref:t},h),{},{components:n})):a.createElement(d,r({ref:t},h))}));function p(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5468:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const o={title:"How to lint and test your helm chart"},r=void 0,l={unversionedId:"guides/how-to-lint-and-test-your-helm-chart",id:"guides/how-to-lint-and-test-your-helm-chart",title:"How to lint and test your helm chart",description:"This how-to will show you some options, how you can improve the quality of your helm chart by linting and testing",source:"@site/docs/guides/how-to-lint-and-test-your-helm-chart.md",sourceDirName:"guides",slug:"/guides/how-to-lint-and-test-your-helm-chart",permalink:"/docs/guides/how-to-lint-and-test-your-helm-chart",draft:!1,editUrl:"https://github.com/catenax-ng/catenax-ng.github.io/edit/main/docs/guides/how-to-lint-and-test-your-helm-chart.md",tags:[],version:"current",frontMatter:{title:"How to lint and test your helm chart"},sidebar:"tutorialSidebar",previous:{title:"How To Define Helm Chart Dependencies",permalink:"/docs/guides/how-to-helm-dependency"},next:{title:"How To Monitor CPU And Memory Usage",permalink:"/docs/guides/how-to-monitor"}},s={},c=[{value:"GitHub workflow",id:"github-workflow",level:2},{value:"What is helm test",id:"what-is-helm-test",level:2}],h={toc:c};function u(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This how-to will show you some options, how you can improve the quality of your helm chart by linting and testing\nit in a GitHub workflow."),(0,i.kt)("h2",{id:"github-workflow"},"GitHub workflow"),(0,i.kt)("p",null,"The GitHub workflow in this section is a good option to run checks on pull requests.\nIt will lint your Helm chart and execute helm test to validate your installation on a kind cluster, that will be\ncreated on demand on the GitHub runner."),(0,i.kt)("p",null,"You can use the following workflow definition as a starting point:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'name: Lint and Test Charts\n\n# Run chart linting and tests on each pull request\non: pull_request\n\njobs:\n  lint-test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v2\n        with:\n          fetch-depth: 0\n\n      - name: Set up Helm\n        uses: azure/setup-helm@v1\n        with:\n          version: v3.9.3\n\n      # Setup python as a prerequisite for chart linting \n      - uses: actions/setup-python@v2\n        with:\n          python-version: 3.7\n\n      - name: Set up chart-testing\n        uses: helm/chart-testing-action@v2.2.1\n\n      - name: Run chart-testing (list-changed)\n        id: list-changed\n        run: |\n          changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }})\n          if [[ -n "$changed" ]]; then\n            echo "::set-output name=changed::true"\n          fi\n\n      # run chart linting \n      - name: Run chart-testing (lint)\n        run: ct lint --target-branch ${{ github.event.repository.default_branch }} --config charts/chart-testing-config.yaml\n\n      # Preparing a kind cluster to install and test charts on\n      - name: Create kind cluster\n        uses: helm/kind-action@v1.2.0\n        if: steps.list-changed.outputs.changed == \'true\'\n\n      # install the chart to the kind cluster and run helm test\n      # define charts to test with the --charts parameter\n      - name: Run chart-testing (install)\n        run: ct install --charts charts/k8s-helm-example --config charts/chart-testing-config.yaml\n')),(0,i.kt)("p",null,"You can use this workflow 'as-is'. The only thing you need to adapt is the list of charts to test in the final\n",(0,i.kt)("inlineCode",{parentName:"p"},"ct install")," step."),(0,i.kt)("p",null,"As you might have noticed, the ",(0,i.kt)("inlineCode",{parentName:"p"},"ct lint")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ct install")," steps are also using a configuration file specified by a\n",(0,i.kt)("inlineCode",{parentName:"p"},"--config")," parameter. Currently, we recommend using the chart-testing defaults. The only settings you might want to\ndisable is the maintainer check while linting the chart.\nThis can be achieved with the following setting in the configuration file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"# charts/chart-testing-config.yaml\nvalidate-maintainers: false\n")),(0,i.kt)("h2",{id:"what-is-helm-test"},"What is helm test"),(0,i.kt)("p",null,"The above described workflow described, how you can lint your helm chart and how to run ",(0,i.kt)("inlineCode",{parentName:"p"},"helm test")," in a GitHub workflow.\nThis section will focus on ",(0,i.kt)("inlineCode",{parentName:"p"},"helm test")," itself and how you can use it to validate your Helm chart installation process.\nYou can also consult the ",(0,i.kt)("a",{parentName:"p",href:"https://helm.sh/docs/topics/chart_tests/"},"official documentation")," on this topic."),(0,i.kt)("p",null,"The following listing shows an example helm test from our\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/catenax-ng/k8s-helm-example/blob/main/charts/k8s-helm-example"},"k8s-helm-example")," chart."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'# https://github.com/catenax-ng/k8s-helm-example/blob/main/charts/k8s-helm-example/templates/tests/test-service-connection.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: "{{ include "k8s-helm-example.fullname" . }}-test-connection"\n  labels:\n    {{- include "k8s-helm-example.labels" . | nindent 4 }}\n  annotations:\n    "helm.sh/hook": test\nspec:\n  containers:\n    - name: wget\n      image: busybox\n      command: [\'wget\']\n      args: [\'{{ include "k8s-helm-example.fullname" . }}:{{ .Values.service.port }}\']\n  restartPolicy: Never\n')),(0,i.kt)("p",null,"As you can see, a helm tests is a regular kubernetes resource definition. The important part in this definition\nis the annotation ",(0,i.kt)("inlineCode",{parentName:"p"},'"helm.sh/hook": test'),". This specifies, that the pod will be executed, when using the helm test\ncommand."),(0,i.kt)("p",null,"The example above will run a basic wget call to the kubernetes service and will succeed, if the service is reachable\nand fail, if it isn't."))}u.isMDXComponent=!0}}]);