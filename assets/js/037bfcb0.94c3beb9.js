"use strict";(self.webpackChunkcatenax_ng=self.webpackChunkcatenax_ng||[]).push([[394],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=i,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8351:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],s={sidebar_position:5},c="How to integrate KICS",u={unversionedId:"security/how-to-integrate-kics",id:"security/how-to-integrate-kics",title:"How to integrate KICS",description:"We scan infrastructure-as-code with KICS.",source:"@site/docs/security/how-to-integrate-kics.md",sourceDirName:"security",slug:"/security/how-to-integrate-kics",permalink:"/docs/security/how-to-integrate-kics",draft:!1,editUrl:"https://github.com/catenax-ng/catenax-ng.github.io/edit/main/docs/security/how-to-integrate-kics.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"How to integrate GitGuardianShield",permalink:"/docs/security/how-to-integrate-gitguardianshield"},next:{title:"Internal Guides",permalink:"/docs/internal"}},l={},p=[],d={toc:p};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-to-integrate-kics"},"How to integrate KICS"),(0,a.kt)("p",null,"We scan ",(0,a.kt)("strong",{parentName:"p"},"infrastructure-as-code")," with KICS."),(0,a.kt)("p",null,"If your repo does not yet include ",(0,a.kt)("inlineCode",{parentName:"p"},"kics.yml")," or this GitHub action, add this action to your repository workflows."),(0,a.kt)("p",null,"KICS is used as the successor to Checkov."),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Findings with severity ",(0,a.kt)("inlineCode",{parentName:"p"},"Error")," are high findings and must be fixed."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'name: "KICS"\n\non:\n  push:\n    branches: [main, master]\n  # pull_request:\n  # The branches below must be a subset of the branches above\n  # branches: [main, master]\n  # paths-ignore:\n  #   - "**/*.md"\n  #   - "**/*.txt"\n  schedule:\n    - cron: "0 0 * * *"\n\njobs:\n  analyze:\n    name: Analyze\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: KICS scan\n        uses: checkmarx/kics-github-action@master\n        with:\n          # Scanning directory .\n          path: "."\n          # Fail on HIGH severity results\n          fail_on: high\n          # when provided with a directory on output_path\n          # it will generate the specified reports file named \'results.{extension}\'\n          # in this example it will generate:\n          # - results-dir/results.json\n          # - results-dir/results.sarif\n          output_path: kicsResults/\n          output_formats: "json,sarif"\n          # If you want KICS to ignore the results and return exit status code 0 unless a KICS engine error happens\n          # ignore_on_exit: results\n          # GITHUB_TOKEN enables this github action to access github API and post comments in a pull request\n          # token: ${{ secrets.GITHUB_TOKEN }}\n          # enable_comments: true\n\n      # Upload findings to GitHub Advanced Security Dashboard\n      - name: Upload SARIF file for GitHub Advanced Security Dashboard\n        if: always()\n        uses: github/codeql-action/upload-sarif@v1\n        with:\n          sarif_file: kicsResults/results.sarif\n')))}m.isMDXComponent=!0}}]);