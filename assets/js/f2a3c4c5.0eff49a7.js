"use strict";(self.webpackChunkcatenax_ng=self.webpackChunkcatenax_ng||[]).push([[7571],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,h=m["".concat(u,".").concat(d)]||m[d]||c[d]||i;return n?r.createElement(h,l(l({ref:t},p),{},{components:n})):r.createElement(h,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6854:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],o={title:"How to use GitguardianShield"},u=void 0,s={unversionedId:"security/GitguardianShield",id:"security/GitguardianShield",title:"How to use GitguardianShield",description:"About GitGuardianShield",source:"@site/docs/security/GitguardianShield.md",sourceDirName:"security",slug:"/security/GitguardianShield",permalink:"/docs/security/GitguardianShield",draft:!1,editUrl:"https://github.com/catenax-ng/catenax-ng.github.io/edit/main/docs/security/GitguardianShield.md",tags:[],version:"current",frontMatter:{title:"How to use GitguardianShield"},sidebar:"tutorialSidebar",previous:{title:"Checkov",permalink:"/docs/security/checkov"},next:{title:"How to integrate Veracode to your JIRA project",permalink:"/docs/security/veracode-jira-plugin"}},p={},c=[{value:"About GitGuardianShield",id:"about-gitguardianshield",level:3},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Installation",id:"installation",level:3},{value:"Login",id:"login",level:3},{value:"Local Scanning",id:"local-scanning",level:3},{value:"Integration",id:"integration",level:2},{value:"Prerequisites",id:"prerequisites-1",level:3},{value:"Pre-commit",id:"pre-commit",level:3},{value:"Steps",id:"steps",level:4},{value:"Pre-push",id:"pre-push",level:3},{value:"Steps",id:"steps-1",level:4}],m={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h3",{id:"about-gitguardianshield"},"About GitGuardianShield"),(0,i.kt)("p",null,"GitGuardianShield is a CLI application that runs in your local environment to detect secrets and block them before they enter the git repository.\nUsing a hook ",(0,i.kt)("strong",{parentName:"p"},"pre-commit"),"/",(0,i.kt)("strong",{parentName:"p"},"pre-push")," the secret scans can be automated."),(0,i.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Python and Pip")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"GitGuardian account"))),(0,i.kt)("h3",{id:"installation"},"Installation"),(0,i.kt)("p",null,"Execute the following CLI:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"pip install ggshield (if this doesn't work, try: pip3 install ggshield)")),(0,i.kt)("h3",{id:"login"},"Login"),(0,i.kt)("p",null,"To use GitGuardianshield you need to be authentified by the GitGuardian Server. For this, execute the following CLI:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ggshield auth login.")),(0,i.kt)("p",null,"This automatically generate an access token."),(0,i.kt)("h3",{id:"local-scanning"},"Local Scanning"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To scan a file use the ",(0,i.kt)("strong",{parentName:"p"},"CLI"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},'ggshield secret scan path "Name of File"'))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To scan a directory use the ",(0,i.kt)("strong",{parentName:"p"},"CLI"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ggshield secret scan path -r ."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To scan every changes that have been staged in a git repo (pre-commit) use the ",(0,i.kt)("strong",{parentName:"p"},"CLI"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ggshield secret scan pre-commit"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To scan all commits in a git repository use the ",(0,i.kt)("strong",{parentName:"p"},"CLI"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ggshield secret scan repo ."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To ignore the last fund secrets use the ",(0,i.kt)("strong",{parentName:"p"},"CLI"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"ggshield ignore --last-found"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"To ignore a path add to the ",(0,i.kt)("strong",{parentName:"p"},"gitguardian.yaml File"),":"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"paths-ignore:\n'**/folder-path/**'\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"To ignore selected files add to the ",(0,i.kt)("strong",{parentName:"li"},"gitguardian.yaml File"),":")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"paths-ignore:\n'**/file-path'\n")),(0,i.kt)("h2",{id:"integration"},"Integration"),(0,i.kt)("h3",{id:"prerequisites-1"},"Prerequisites"),(0,i.kt)("p",null,"Install pre-commit with the ",(0,i.kt)("strong",{parentName:"p"},"CLI"),":"),(0,i.kt)("p",null,"-pip install pre-commit"),(0,i.kt)("h3",{id:"pre-commit"},"Pre-commit"),(0,i.kt)("p",null,"The pre-commit hook checks the commit for secrets and blocks the commit if there are any."),(0,i.kt)("p",null,"The pre-commit hook is easier to work with since it catches the error as you made it."),(0,i.kt)("p",null,"An internet connection will be required for the commits."),(0,i.kt)("h4",{id:"steps"},"Steps"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'create a "pre-commit-config.yaml" file in your root repo:')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"repos:\n  - repo : https://github.com/gitguardian/ggshield\n    rev: v1.10.7 (latest version)\n    hooks:\n      - id: ggshield\n        language_version: python3\n        stage: [commit]\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"install a githook based on the yaml file with the CLI:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"pre-commit install")))),(0,i.kt)("h3",{id:"pre-push"},"Pre-push"),(0,i.kt)("p",null,"The pre-push checks a group of commits for secrets, and block the push if there are any."),(0,i.kt)("p",null,"The Pre-push hook reduces the amount of scanning but if a secret is detected, you have to rewrite your history."),(0,i.kt)("h4",{id:"steps-1"},"Steps"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'create a "pre-commit-config.yaml" file in your root repo:')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"repos:\n  - repo : https://github.com/gitguardian/ggshield\n    rev: v1.10.7 (latest version)\n    hooks:\n      - id: ggshield-push\n        language_version: python3\n        stage: [push]\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"install a githook based on the yaml file with the ",(0,i.kt)("strong",{parentName:"p"},"CLI"),":"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"pre-commit install --hook-type pre-push")))))}d.isMDXComponent=!0}}]);