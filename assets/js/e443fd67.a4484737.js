"use strict";(self.webpackChunkcatenax_ng=self.webpackChunkcatenax_ng||[]).push([[4566],{8091:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var t=a(5893),i=a(1151);const s={sidebar_position:2},o="How to integrate Veracode",r={id:"security/how-to-integrate-veracode",title:"How to integrate Veracode",description:"We perform static application security testing, FOSS license scanning, and software composition analysis with Veracode.",source:"@site/docs/security/how-to-integrate-veracode.md",sourceDirName:"security",slug:"/security/how-to-integrate-veracode",permalink:"/docs/security/how-to-integrate-veracode",draft:!1,unlisted:!1,editUrl:"https://github.com/catenax-ng/catenax-ng.github.io/edit/main/docs/security/how-to-integrate-veracode.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Contact and Overview",permalink:"/docs/security/contact"},next:{title:"How to integrate Veracode to your JIRA project",permalink:"/docs/security/how-to-integrate-veracode-to-your-jira-project"}},c={},l=[{value:"Upload and Scan",id:"upload-and-scan",level:2},{value:"Pipeline",id:"pipeline",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"how-to-integrate-veracode",children:"How to integrate Veracode"}),"\n",(0,t.jsxs)(n.p,{children:["We perform ",(0,t.jsx)(n.strong,{children:"static application security testing"}),", ",(0,t.jsx)(n.strong,{children:"FOSS license scanning"}),", and ",(0,t.jsx)(n.strong,{children:"software composition analysis"})," with Veracode."]}),"\n",(0,t.jsxs)(n.p,{children:["Two actions are provided - ",(0,t.jsx)(n.em,{children:"upload and scan"})," and ",(0,t.jsx)(n.em,{children:"pipeline"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"upload-and-scan",children:"Upload and Scan"}),"\n",(0,t.jsxs)(n.p,{children:["Depending on how your application is built, you will need to run the build once and configure it under ",(0,t.jsx)(n.code,{children:"filepath"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Also the name of the Veracode application must be specified under ",(0,t.jsx)(n.code,{children:"appname"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'name: "Veracode upload and scan"\n\non:\n  # push:\n  #   branches: [main]\n  # pull_request:\n  # The branches below must be a subset of the branches above\n  # branches: [ main ]\n  # paths-ignore:\n  #   - "**/*.md"\n  #   - "**/*.txt"\n  schedule:\n    # Once a day\n    - cron: "0 0 * * *"\n  workflow_dispatch:\n  # Trigger manually\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Build your code according to Veracode rules\n      - name: "Bundle / Build files to scan"\n        run: zip -r foo.zip foo\n\n      - name: Run Veracode Upload And Scan\n        uses: veracode/veracode-uploadandscan-action@0.2.1\n        with:\n          # Specify Veracode application name\n          appname: "<REPLACEME Veracode App Name>"\n          createprofile: false\n          # Specify path to upload\n          filepath: "<REPLACEME Path to file>"\n          vid: "${{ secrets.VERACODE_API_ID }}"\n          vkey: "${{ secrets.VERACODE_API_KEY }}"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"pipeline",children:"Pipeline"}),"\n",(0,t.jsx)(n.p,{children:"The pipeline scan is a local scan that provides quick results that are imported into the Code Scanning Alerts dashboard. The pipeline scan only supports static application security testing."}),"\n",(0,t.jsx)(n.p,{children:"For example, it can also run as a status check in the pull requests."}),"\n",(0,t.jsxs)(n.p,{children:["Replace ",(0,t.jsx)(n.code,{children:'--file "<REPLACEME Path to file>"'})," with the path to your build or zipped files."]}),"\n",(0,t.jsx)(n.p,{children:"The results between the pipeline scan and the upload scan may differ."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'name: "Veracode pipeline scan"\n\non:\n  push:\n    branches: [main]\n  # pull_request:\n  # The branches below must be a subset of the branches above\n  # branches: [ main ]\n  # paths-ignore:\n  #   - "**/*.md"\n  #   - "**/*.txt"\n  # schedule:\n  # Once a day\n  # - cron: "0 0 * * *"\n  workflow_dispatch:\n  # Trigger manually\n\njobs:\n  analyze:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # Build your code according to Veracode rules\n      - name: "Bundle / Build files to scan"\n        run: zip -r foo.zip foo\n\n      - name: Set up JDK 1.8\n        uses: actions/setup-java@v1\n        with:\n          java-version: 1.8\n      - name: Download the Pipeline Scanner\n        uses: wei/curl@master\n        with:\n          args: -O https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip\n      - name: Unzip the Pipeline Scanner\n        # Overwrites files\n        # Sometimes there are conflicts, e.g. README.md\n        run: unzip -o pipeline-scan-LATEST.zip\n      - name: Run Pipeline Scanner\n        # Specify path to your files\n        run: java -Dpipeline.debug=true -jar pipeline-scan.jar --veracode_api_id "${{secrets.VERACODE_API_ID}}" --veracode_api_key "${{secrets.VERACODE_API_KEY}}" --file "<REPLACEME Path to file>" --fail_on_severity="Very High, High" -jo true\n\n      - name: Convert pipeline scan output to SARIF format\n        if: always()\n        uses: Veracode/veracode-pipeline-scan-results-to-sarif@v0.1.5\n        with:\n          pipeline-results-json: results.json\n          output-results-sarif: veracode-results.sarif\n          source-base-path-1: "^com/veracode:src/main/java/com/veracode"\n          source-base-path-2: "^WEB-INF:src/main/webapp/WEB-INF"\n          finding-rule-level: "3:1:0"\n\n      - name: Upload Veracode sarif file to repository\n        uses: github/codeql-action/upload-sarif@v2\n        if: always()\n        with:\n          sarif_file: veracode-results.sarif\n'})})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>r,a:()=>o});var t=a(7294);const i={},s=t.createContext(i);function o(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);