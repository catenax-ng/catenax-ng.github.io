"use strict";(self.webpackChunkcatenax_ng=self.webpackChunkcatenax_ng||[]).push([[6643],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),g=c(n),m=a,d=g["".concat(s,".").concat(m)]||g[m]||p[m]||i;return n?r.createElement(d,o(o({ref:t},u),{},{components:n})):r.createElement(d,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9147:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={title:"TRG 4.01 - Image tagging"},o=void 0,l={unversionedId:"trg/trg-4/trg-4-1",id:"trg/trg-4/trg-4-1",title:"TRG 4.01 - Image tagging",description:"| Author               | Status | Created     | Post-History     |",source:"@site/docs/trg/trg-4/trg-4-1.md",sourceDirName:"trg/trg-4",slug:"/trg/trg-4/trg-4-1",permalink:"/docs/trg/trg-4/trg-4-1",draft:!1,editUrl:"https://github.com/catenax-ng/catenax-ng.github.io/edit/main/docs/trg/trg-4/trg-4-1.md",tags:[],version:"current",frontMatter:{title:"TRG 4.01 - Image tagging"},sidebar:"tutorialSidebar",previous:{title:"TRG 3.01 - Supported Versions",permalink:"/docs/trg/trg-3/trg-3-1"},next:{title:"TRG 4.02 - Base images",permalink:"/docs/trg/trg-4/trg-4-2"}},s={},c=[{value:"Description",id:"description",level:2},{value:"Why",id:"why",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Author"),(0,a.kt)("th",{parentName:"tr",align:null},"Status"),(0,a.kt)("th",{parentName:"tr",align:null},"Created"),(0,a.kt)("th",{parentName:"tr",align:null},"Post-History"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Catena-X System Team"),(0,a.kt)("td",{parentName:"tr",align:null},"Active"),(0,a.kt)("td",{parentName:"tr",align:null},"10-Nov-2022"),(0,a.kt)("td",{parentName:"tr",align:null},"Initital release")))),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,"After building a new container image, the image must be tagged at least with ",(0,a.kt)("a",{parentName:"p",href:"https://semver.org/"},"SemVer")," and ",(0,a.kt)("inlineCode",{parentName:"p"},":latest"),"\n."),(0,a.kt)("h2",{id:"why"},"Why"),(0,a.kt)("p",null,"We do that to easily identify the application version running in your container."),(0,a.kt)("p",null,"As these container images will usually be used in versioned Helm charts, using ",(0,a.kt)("inlineCode",{parentName:"p"},":latest")," as tag would destroy the idea\nof a versioned and released Helm chart, as a changed image could be injected without changing the Helm chart version. So\na specific Helm chart version could behave different, due to the underlying container image. This behavior is unwanted."),(0,a.kt)("p",null,"If you're using ",(0,a.kt)("inlineCode",{parentName:"p"},"docker/metadata-action@v4")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"docker/build-push-action@v3")," in your GitHub Action Workflow to build\nyour container image, you can ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/marketplace/actions/docker-metadata-action#semver"},"easily achieve")," the\ngoal of this TRG:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"env:\n  REGISTRY: ghcr.io\n  IMAGE_NAME: ${{ github.repository }}\n\njobs:\n  docker:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Docker meta\n        id: meta\n        uses: docker/metadata-action@v4\n        with:\n          images: |\n            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\n          tags: |\n            type=ref,event=branch\n            type=ref,event=pr\n            type=semver,pattern={{version}}\n            type=semver,pattern={{major}}.{{minor}}\n\n      - name: Log into registry ${{ env.REGISTRY }}\n        uses: docker/login-action@v2\n        with:\n          registry: ${{ env.REGISTRY }}\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Build and push\n        uses: docker/build-push-action@v3\n        with:\n          context: .\n          push: ${{ github.event_name != 'pull_request' }}\n          tags: ${{ steps.meta.outputs.tags }}\n          labels: ${{ steps.meta.outputs.labels }}\n")))}p.isMDXComponent=!0}}]);