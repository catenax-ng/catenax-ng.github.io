"use strict";(self.webpackChunkcatenax_ng=self.webpackChunkcatenax_ng||[]).push([[7838],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>v});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(n),v=r,m=d["".concat(u,".").concat(v)]||d[v]||p[v]||o;return n?a.createElement(m,l(l({ref:t},c),{},{components:n})):a.createElement(m,l({ref:t},c))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6132:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={title:"How to setup Hashicorp Vault"},l=void 0,i={unversionedId:"internal/how-to-setup-hashicorp-vault",id:"internal/how-to-setup-hashicorp-vault",title:"How to setup Hashicorp Vault",description:"This guide is only for those who operate the environment",source:"@site/docs/internal/how-to-setup-hashicorp-vault.md",sourceDirName:"internal",slug:"/internal/how-to-setup-hashicorp-vault",permalink:"/docs/internal/how-to-setup-hashicorp-vault",draft:!1,editUrl:"https://github.com/catenax-ng/catenax-ng.github.io/edit/main/docs/internal/how-to-setup-hashicorp-vault.md",tags:[],version:"current",frontMatter:{title:"How to setup Hashicorp Vault"},sidebar:"tutorialSidebar",previous:{title:"How to manage forked repositories from eclipse-tractusx",permalink:"/docs/internal/how-to-setup-forked-repo"},next:{title:"How To Use HashiCorp Vault",permalink:"/docs/internal/how-to-use-vault"}},u={},s=[{value:"Create an AKS cluster for vault",id:"create-an-aks-cluster-for-vault",level:2},{value:"Deploy Vault",id:"deploy-vault",level:2},{value:"Configure Vault",id:"configure-vault",level:2}],c={toc:s};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This guide is only for those who operate the environment")),(0,r.kt)("p",null,"This how-to will guide you through the deployment and configuration of Hashicorp Vault"),(0,r.kt)("h2",{id:"create-an-aks-cluster-for-vault"},"Create an AKS cluster for vault"),(0,r.kt)("p",null,"main.tf contains resources that will be created, e.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'module "resource_group" {\n  source = "../modules/resource_group"\n\n  resource_group_name = var.environment_name\n}\n\nmodule "aks" {\n  source = "../modules/aks_cluster"\n\n  aks_cluster_name   = "cx-${var.environment_name}-aks"\n  aks_location       = module.resource_group.resource_location\n  aks_resource_group = module.resource_group.resource_group_name\n\n  aks_service_principal_client_id     = var.service_principal_client_id\n  aks_service_principal_client_secret = var.service_principal_client_secret\n  aks_dns_prefix                      = "cx-${var.environment_name}-aks"\n\n  k8s_vm_size = var.k8s_vm_size\n  k8s_cluster_node_count = var.k8s_cluster_node_count\n}\n\nmodule "public_ip" {\n  source = "../modules/public_ip"\n\n  public_ip_name      = "cx-${var.environment_name}-public-ip"\n  resource_location   = module.resource_group.resource_location\n  resource_group_name = module.aks.node_resource_group\n}\n\nmodule "a_record" {\n  source = "../modules/a_record"\n\n  record_name = "*.${var.environment_name}"\n  target_resource_id = module.public_ip.id\n  resource_group_name = "cxtsi-demo-shared-rg"\n  zone_name = "demo.catena-x.net"\n}\n')),(0,r.kt)("p",null,"variables.tf contains all parameters of the resources, e.g."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'variable "environment_name" {\n  description = "Name of the environment to create, i.e. \'core\'. Will be used in several resource names"\n  type        = string\n}\n\nvariable "service_principal_client_id" {\n  description = "USE TF_VAR_service_principal_client_id! The client ID of the service principal that will be used to create the AKS cluster."\n  type        = string\n}\n\nvariable "service_principal_client_secret" {\n  description = "USE TF_VAR_service_principal_client_secret! The secret of the service principal that will be used to create the AKS cluster."\n}\n\nvariable "k8s_vm_size" {\n  description = "The Azure VM Size string i.e. Standard_D2_v2 or Standard_D8s_v3"\n  type        = string\n  default     = "Standard_D8s_v3"\n}\n\nvariable "k8s_cluster_node_count" {\n  description = "The number of kubernetes nodes to create for the k8s cluster"\n  type        = number\n  default     = 3\n}\n')),(0,r.kt)("p",null,"environments/vault.tfvars contains variables that are specific to the environment, and override the ones in variables.tf"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'environment_name="vault"\nk8s_vm_size="Standard_B2s"\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://catenax-ng.github.io/docs/internal/how-to-setup-aks-cluster-via-terraform"},"More information on AKS cluster creation")),(0,r.kt)("h2",{id:"deploy-vault"},"Deploy Vault"),(0,r.kt)("p",null,"ArgoCD application"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: vault\n  namespace: argocd\n  labels:\n    environment: core\nspec:\n  project: default\n  source:\n    repoURL: 'https://github.com/catenax-ng/k8s-cluster-stack'\n    path: apps/vault\n    targetRevision: 'HEAD'\n    plugin:\n      name: argocd-vault-plugin-helm-args\n      env:\n        - name: AVP_SECRET\n          value: vault-secret\n        - name: helm_args\n          value: '-f values.yaml -f values-vault-vault.yaml'\n  destination:\n    namespace: vault\n    name: vault-cluster\n    server: ''\n  syncPolicy:\n    syncOptions:\n      - Validate=false\n      - CreateNamespace=true\n      - PrunePropagationPolicy=foreground\n      - PruneLast=true\n    retry:\n      limit: 5\n      backoff:\n        duration: 5s\n        factor: 2\n        maxDuration: 3m\n  ignoreDifferences: # https://github.com/argoproj/argo-cd/issues/4276#issuecomment-908455476\n    - group: admissionregistration.k8s.io\n      kind: MutatingWebhookConfiguration\n      jqPathExpressions:\n        - .webhooks[]?.clientConfig.caBundle\n")),(0,r.kt)("p",null,"Helm chart"),(0,r.kt)("p",null,"Chart.yaml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"apiVersion: v2\nname: vault\ndescription: Hashicorp vault\ntype: application\nversion: 0.0.2\nappVersion: 0.1\n")),(0,r.kt)("p",null,"values.yaml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'domain: "demo.catena-x.net"\nvault:\n  server:\n    ha:\n      config: |\n        ui = true\n        listener "tcp" {\n          tls_disable = 1\n          address = "[::]:8200"\n          cluster_address = "[::]:8201"\n        }\n        storage "raft" {\n          path = "/vault/data"\n        }\n        service_registration "kubernetes" {}\n        disable_mlock = true\n      enabled: true\n      raft:\n        enabled: true\n        config: |\n          ui = true\n          listener "tcp" {\n            tls_disable = 1\n            address = "[::]:8200"\n            cluster_address = "[::]:8201"\n          }\n          storage "raft" {\n            path = "/vault/data"\n          }\n          service_registration "kubernetes" {}\n          disable_mlock = true\n    extraEnvironmentVars:\n      VAULT_SEAL_TYPE: "azurekeyvault"\n      VAULT_AZUREKEYVAULT_VAULT_NAME: "cx-vault-unseal"\n      VAULT_AZUREKEYVAULT_KEY_NAME: "hashicorp-vault-key"\n      AZURE_TENANT_ID: "<TENANT ID>"\n      AZURE_CLIENT_ID: "<CLIENT ID>"\n    extraSecretEnvironmentVars:\n      - envName: AZURE_CLIENT_SECRET\n        secretName: azure-vault-secret\n        secretKey: client-secret\n\n')),(0,r.kt)("p",null,"Initialization and first time unseal is manual action (for now)"),(0,r.kt)("p",null,"Get the kube config of the vault cluster"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"az login --use-device-code --tenant <tenant_id>\naz account set <subscripition_id>\naz aks get-credentials --admin --resource-group cx-vault-rg --name cx-vault-aks-services --file $HOME/.kube/cx-vault-admin\n")),(0,r.kt)("p",null,"Initialize one of the vault instances and save the root token and unseal keys"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"kubectl --kubeconfig=.kube/cx-vault-admin -n vault exec pod/vault-0 -- /bin/sh vault operator init")),(0,r.kt)("p",null,"Login with the root token"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"kubectl --kubeconfig=.kube/cx-vault-admin -n vault exec pod/vault-0 -- /bin/sh vault login")),(0,r.kt)("p",null,"Unseal the first instance by running the following command three times"),(0,r.kt)("p",null,"Each time provide a different unseal key out of the five that are generated during initialization"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"kubectl --kubeconfig=.kube/cx-vault-admin -n vault exec pod/vault-0 -- /bin/sh vault operator unseal")),(0,r.kt)("p",null,"Display the status of the first instance and note the internal url / ip address of the first node that will be the leader"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"kubectl --kubeconfig=.kube/cx-vault-admin -n vault exec pod/vault-0 -- /bin/sh vault status")),(0,r.kt)("p",null,"If the initialization and unseal were successful, you will see the following status"),(0,r.kt)("p",null,"...\\\nInitialized              true\\\nSealed                   false\\\n..."),(0,r.kt)("p",null,"Join the other (two) instances as followers to the first instance"),(0,r.kt)("p",null,"Provide the vault root token when prompted"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"kubectl --kubeconfig=.kube/cx-vault-admin -n vault exec pod/vault-1 -- /bin/sh vault login")),(0,r.kt)("p",null,"Join the first instance using its internal url or ip address"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"kubectl --kubeconfig=.kube/cx-vault-admin -n vault exec pod/vault-1 -- /bin/sh vault operator raft join http://vault-0.vault-internal:8200")),(0,r.kt)("p",null,"Check the status of the following instances"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"kubectl --kubeconfig=.kube/cx-vault-admin -n vault exec pod/vault-1 -- /bin/sh vault status")),(0,r.kt)("p",null,"In case sealed is true, then unseal them as well, again run the command three times providing three different unseal keys out of the five"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"kubectl --kubeconfig=.kube/cx-vault-admin -n vault exec pod/vault-1 -- /bin/sh vault operator unseal")),(0,r.kt)("p",null,"Once all instances have been unsealed, no further unseal will be necessary, as Azure keyvault will take care of it."),(0,r.kt)("h2",{id:"configure-vault"},"Configure Vault"),(0,r.kt)("p",null,"Clone GitHub repository k8s-cluster-stack"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"git clone https://github.com/catenax-ng/k8s-cluster-stack.git")),(0,r.kt)("p",null,"Get the approle ID and approle secret ID from Azure Keyvault cx-vault-unseal secrets using Azure CLI"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"az login --use-device-code --tenant <Tenant ID>\naz account set <Subscription ID>\naz keyvault secret show --vault-name cx-vault-unseal --name vault-approle-id | jq '.value'\naz keyvault secret show --vault-name cx-vault-unseal --name vault-approle-secret-id | jq '.value'\n")),(0,r.kt)("p",null,"Get the approle ID and approle secret ID from Azure Keyvault cx-vault-unseal secretsfrom the Azure portal"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://portal.azure.com/#@catenax.onmicrosoft.com/asset/Microsoft_Azure_KeyVault/Secret/https://cx-vault-unseal.vault.azure.net/secrets/vault-approle-id"},"Approle ID")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://portal.azure.com/#@catenax.onmicrosoft.com/asset/Microsoft_Azure_KeyVault/Secret/https://cx-vault-unseal.vault.azure.net/secrets/vault-approle-secret-id"},"Approle secret ID")),(0,r.kt)("p",null,"Configure Vault in Terraform code"),(0,r.kt)("p",null,"main.tf"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'locals {\n  teams = [\n    "bpdm",\n    "catenax-at-home",\n    "dft",\n    "edc",\n    "esc-backbone",\n    "essential-services",\n    "integrity-demonstrator",\n    "managed-identity-wallets",\n    "material-pass",\n    "portal",\n    "semantics",\n    "team-example",\n    "test-data-generator",\n    "traceability-foss",\n    "traceability-irs"\n  ]\n}\n\n\nresource "vault_mount" "devsecops-secret-engine" {\n  path        = "devsecops"\n  type        = "kv-v2"\n  description = "Secret engine for DevSecOps team"\n}\n\nresource "vault_mount" "product-team-secret-engines" {\n\n  for_each = toset( local.teams )\n\n  path        = each.key\n  type        = "kv-v2"\n  description = "Secret engine for team ${each.key}"\n}\n\nresource "vault_policy" "product-team-policies" {\n\n  for_each = toset(local.teams)\n\n  name   = each.key\n  policy = <<EOT\npath "${each.key}/*" {\n  capabilities = [ "create", "read", "update", "delete", "list" ]\n}\nEOT\n}\n\nresource "vault_policy" "product-approle-read-only-policies" {\n\n  for_each = toset(local.teams)\n\n  name   = "${each.key}-ro"\n  policy = <<EOT\npath "${each.key}/*" {\n  capabilities = [ "read" ]\n}\nEOT\n}\n\n# https://www.vaultproject.io/docs/auth/jwt\nresource "vault_jwt_auth_backend" "github-oidc-provider" {\n  description        = "Configuration for GitHub as OIDC provider"\n  path               = "github"\n  type               = "oidc"\n  # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-hashicorp-vault\n  oidc_discovery_url = "https://token.actions.githubusercontent.com"\n  oidc_client_id     = var.oidc_client_id\n  oidc_client_secret = var.oidc_client_secret\n  default_role       = "default"\n  bound_issuer       = "https://token.actions.githubusercontent.com"\n  tune {\n    listing_visibility = "unauth"\n  }\n}\n\nresource "vault_jwt_auth_backend_role" "default" {\n\n  backend        = vault_jwt_auth_backend.github-oidc-provider.path\n  role_name      = "default"\n  token_policies = ["default"]\n  oidc_scopes    = ["groups"]\n\n  user_claim            = "email"\n  groups_claim          = "groups"\n  role_type             = "oidc"\n  allowed_redirect_uris = [\n    "${var.vault_address}/ui/vault/auth/${vault_jwt_auth_backend.github-oidc-provider.path}/oidc/callback",\n    "http://localhost:8200/ui/vault/auth/oidc/oidc/callback"\n  ]\n}\n')),(0,r.kt)("p",null,"variables.tf"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'variable "vault_address" {\n  description = "URL of the vault instance to configure"\n  type        = string\n  default     = "https://vault.vault.catena-x.net"\n}\n\nvariable login_approle_role_id {\n  description = "The role_id of the approle, terraform uses to authenticate in vault"\n  type        = string\n}\n\nvariable login_approle_secret_id {\n  description = "The secret_id of the approle, terraform uses to authenticate in vault"\n  type        = string\n}\n\nvariable "oidc_client_id" {\n  description = "The client ID used for GitHub OIDC"\n  type        = string\n}\n\nvariable "oidc_client_secret" {\n  description = "The client secret used for GitHub OIDC"\n  type        = string\n}\n')),(0,r.kt)("p",null,"Plan and apply with Terraform"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cd k8s-cluster-stack/terraform/02_vault\nterraform init\nterraform plan -var='login_approle_role_id=${APPROLE_ID}' -var='login_approle_secret_id=${APPROLE_SECRET_ID}' -out .terraform/vault.tfplan\nterraform apply \".terraform/vault.tfplan\"\n")))}p.isMDXComponent=!0}}]);