"use strict";(self.webpackChunkcatenax_ng=self.webpackChunkcatenax_ng||[]).push([[3428],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(n),d=s,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9558:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(7462),s=(n(7294),n(3905));const r={title:"How to use persistent storage"},i=void 0,o={unversionedId:"guides/kubernetes/how-to-use-persistent-storage",id:"guides/kubernetes/how-to-use-persistent-storage",title:"How to use persistent storage",description:"This is a short guide on how to create persistent storage on Kubernetes clusters.",source:"@site/docs/guides/kubernetes/how-to-use-persistent-storage.md",sourceDirName:"guides/kubernetes",slug:"/guides/kubernetes/how-to-use-persistent-storage",permalink:"/docs/guides/kubernetes/how-to-use-persistent-storage",draft:!1,editUrl:"https://github.com/catenax-ng/catenax-ng.github.io/edit/main/docs/guides/kubernetes/how-to-use-persistent-storage.md",tags:[],version:"current",frontMatter:{title:"How to use persistent storage"},sidebar:"tutorialSidebar",previous:{title:"How To Monitor CPU And Memory Usage",permalink:"/docs/guides/kubernetes/how-to-monitor"},next:{title:"Catena-X@Home Getting Started Guide",permalink:"/docs/guides/catenax-at-home"}},l={},c=[{value:"A very basic PersistentVolumeClaim (PVC) definition",id:"a-very-basic-persistentvolumeclaim-pvc-definition",level:2},{value:"Templating PVC",id:"templating-pvc",level:2},{value:"Create a template in the templates directory of the helm chart",id:"create-a-template-in-the-templates-directory-of-the-helm-chart",level:3},{value:"Specify values for PVC in values.yaml",id:"specify-values-for-pvc-in-valuesyaml",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This is a short guide on how to create persistent storage on Kubernetes clusters."),(0,s.kt)("h2",{id:"a-very-basic-persistentvolumeclaim-pvc-definition"},"A very basic PersistentVolumeClaim (PVC) definition"),(0,s.kt)("p",null,"PVC without storage class, using default"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: example-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  volumeMode: Filesystem\n  resources:\n    requests:\n      storage: 8Gi\n")),(0,s.kt)("admonition",{title:"Reclaim policy Delete vs Retain",type:"caution"},(0,s.kt)("p",{parentName:"admonition"},"By default AKS clusters have storage classes with reclaim policy Delete\nThis means if the PVC is deleted, the underlying PersistentVolume (PV) will also be deleted\nTo prevent this from happening, on ",(0,s.kt)("strong",{parentName:"p"},"dev and int clusters")," use storageclass ",(0,s.kt)("strong",{parentName:"p"},"default-retain")),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"kind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: example-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  volumeMode: Filesystem\n  storageClassName: default-retain\n  resources:\n    requests:\n      storage: 8Gi\n"))),(0,s.kt)("p",null,"A basic example in ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/catenax-ng/k8s-helm-example/tree/main/charts/k8s-helm-example/templates/persistentVolumeClaim.yaml"},"k8s-helm-example")),(0,s.kt)("h2",{id:"templating-pvc"},"Templating PVC"),(0,s.kt)("h3",{id:"create-a-template-in-the-templates-directory-of-the-helm-chart"},"Create a template in the templates directory of the helm chart"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"templates/PVC.yaml","templates/PVC.yaml":!0},"{{- if .Values.persistence.enabled }}\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: {{ .Release.Name }}\nspec:\n  accessModes:\n    {{- range .Values.persistence.accessModes }}\n    - {{ . | quote }}\n    {{- end }}\n  volumeMode: {{ .Values.persistence.mode }}\n  {{- if .Values.persistence.class }}\n  storageClassName: {{ .Values.persistence.class }}\n  {{- end }}\n  resources:\n    requests:\n      storage: {{ .Values.persistence.size }}\n{{- end }}\n")),(0,s.kt)("h3",{id:"specify-values-for-pvc-in-valuesyaml"},"Specify values for PVC in values.yaml"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"values.yaml","values.yaml":!0},"persistence:\n  enabled: true\n  accessModes:\n    - ReadWriteOnce\n  mode: Filesystem\n  class: default-retain\n  size: 8Gi\n")),(0,s.kt)("admonition",{title:"Persistent Volumes in Statefulsets",type:"info"},(0,s.kt)("p",{parentName:"admonition"},"In case a Statefulset needs persistent storage, volume claim templates generate PVCs for its replicas"),(0,s.kt)("pre",{parentName:"admonition"},(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"volumeClaimTemplates:\n- metadata:\n    name: example-pvc\n  spec:\n    accessModes:\n      - ReadWriteOnce\n    volumeMode: Filesystem\n    storageClassName: default-retain\n    resources:\n      requests:\n        storage: 8Gi\n\n"))))}u.isMDXComponent=!0}}]);