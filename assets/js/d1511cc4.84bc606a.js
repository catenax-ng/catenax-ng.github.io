"use strict";(self.webpackChunkcatenax_ng=self.webpackChunkcatenax_ng||[]).push([[8117],{9632:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>u});var i=t(5893),r=t(1151);const s={sidebar_position:4},o="How to integrate Trivy",a={id:"security/how-to-integrate-trivy",title:"How to integrate Trivy",description:"We scan containers with Trivy.",source:"@site/docs/security/how-to-integrate-trivy.md",sourceDirName:"security",slug:"/security/how-to-integrate-trivy",permalink:"/docs/security/how-to-integrate-trivy",draft:!1,unlisted:!1,editUrl:"https://github.com/catenax-ng/catenax-ng.github.io/edit/main/docs/security/how-to-integrate-trivy.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"How to integrate Veracode to your JIRA project",permalink:"/docs/security/how-to-integrate-veracode-to-your-jira-project"},next:{title:"How to integrate GitGuardianShield",permalink:"/docs/security/how-to-integrate-gitguardianshield"}},c={},u=[];function l(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"how-to-integrate-trivy",children:"How to integrate Trivy"}),"\n",(0,i.jsxs)(n.p,{children:["We ",(0,i.jsx)(n.strong,{children:"scan containers"})," with Trivy."]}),"\n",(0,i.jsxs)(n.p,{children:["Add the following GitHub action ",(0,i.jsx)(n.em,{children:"trivy.yml"})," to your repository workflows."]}),"\n",(0,i.jsx)(n.p,{children:"In order for Trivy to scan the correct GitHub packages, they must be specified in the action."}),"\n",(0,i.jsx)(n.p,{children:"Integration steps per GitHub package:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Copy job ",(0,i.jsx)(n.code,{children:"analyze-<REPLACE-ME container name\\>"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Replace the name of the job with the name of the GitHub package - green box."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Replace ",(0,i.jsx)(n.code,{children:"image-ref"})," with the yellow box of the GitHub package."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["In order to always scan the latest GitHub package, a tag (red box) must be set for the packages and specified in the ",(0,i.jsx)(n.code,{children:"image-ref"}),"."]})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"github-packages-example.png",src:t(2051).Z+"",width:"764",height:"445"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Depending on the location of your Docker container\n# you need to change the path to the specific Docker registry.\n#\nname: "Trivy"\n\non:\n  push:\n    branches: [main]\n  # pull_request:\n  # The branches below must be a subset of the branches above\n  # branches: [ main ]\n  # paths-ignore:\n  #   - "**/*.md"\n  #   - "**/*.txt"\n  schedule:\n    # Once a day\n    - cron: "0 0 * * *"\n  workflow_dispatch:\n  # Trigger manually\n\njobs:\n  analyze-config:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      - name: Run Trivy vulnerability scanner in repo mode\n        uses: aquasecurity/trivy-action@master\n        with:\n          scan-type: "config"\n          # ignore-unfixed: true\n          exit-code: "1"\n          hide-progress: false\n          format: "sarif"\n          output: "trivy-results1.sarif"\n          severity: "CRITICAL,HIGH"\n\n      - name: Upload Trivy scan results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v2\n        if: always()\n        with:\n          sarif_file: "trivy-results1.sarif"\n\n  analyze-<REPLACE-ME container name>:\n    runs-on: ubuntu-latest\n    permissions:\n      actions: read\n      contents: read\n      security-events: write\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v3\n\n      # It\'s also possible to scan your private registry with Trivy\'s built-in image scan.\n      # All you have to do is set ENV vars.\n      # Docker Hub needs TRIVY_USERNAME and TRIVY_PASSWORD.\n      # You don\'t need to set ENV vars when downloading from a public repository.\n      # For public images, no ENV vars must be set.\n      - name: Run Trivy vulnerability scanner\n        if: always()\n        uses: aquasecurity/trivy-action@master\n        with:\n          # Path to Docker image\n          image-ref: "<REPLACE-ME container name>"\n          format: "sarif"\n          output: "trivy-results2.sarif"\n          exit-code: "1"\n          severity: "CRITICAL,HIGH"\n\n      - name: Upload Trivy scan results to GitHub Security tab\n        if: always()\n        uses: github/codeql-action/upload-sarif@v2\n        with:\n          sarif_file: "trivy-results2.sarif"\n'})})]})}function d(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},2051:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/github-packages-example-89e15a834d06c679d782f1e0c01614cb.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var i=t(7294);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);